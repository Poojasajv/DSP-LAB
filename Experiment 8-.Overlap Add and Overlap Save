
clc;           %overlap add
clear all;
close all;
x = input('Enter the input sequence x :       % User input for input
h = input('Enter the impulse response h : ');  % User input for the impulse 
% Section length for overlap-save
L = length(h);                          % Length of impulse response
                                   % Initialization
N = length(x);
M = length(h);
                                    % Pad input x with zeros
x_padded = [x, zeros(1, L - 1)];
                                     % Prepare the output array
y = zeros(1, N + M +1);
                                     % Calculate the number of sections
num_sections = (N + L - 1) / L;     % Calculate number of sections
                                   % Process sections
for n = 0:num_sections-1
                                    % Determine the current section
start_idx = n * L + 1;
end_idx = start_idx + L - 1;
                            % Ensure the section does not exceed the bounds
x_section = x_padded(start_idx:min(end_idx, end));
                                        % Convolution
conv_result = conv(x_section, h);      % Save the results to the output
y(start_idx:start_idx + length(conv_result) - 1)
=y(start_idx:start_idx + length(conv_result) - 1) + conv_result;
end
% Trim the output to the valid part
y = y(1:N + M - 1);
% Compare with built-in convolution
y_builtin = conv(x, h);
% Display results
disp('Overlap-add convolution result:');
disp(y);
disp('Built-in convolution result:');
disp(y_builtin);
% Plotting results
figure;
subplot(2, 1, 1);
stem(y, 'filled');
title('Overlap-add Convolution Result');
grid on;
subplot(2, 1, 2);
stem(y_builtin, 'filled');
title('Built-in Convolution Result');
grid on;



clc;                %overlap save
clear all;
close all;
% Input the sequences and block size
x = input("Enter 1st sequence: ");
h = input("Enter 2nd sequence: ");
N = input("Fragmented block size: ");
% Call the overlap-save function
y = ovrlsav(x, h, N);
disp("Using Overlap and Save method");
disp(y);
disp("Verification");
disp(cconv(x,h,length(x)+length(h)-1));
% Define the overlap-save method function
function y = ovrlsav(x, h, N)
if (N < length(h))
error("N must be greater than the length of h");
end
Nx = length(x); % Length of input sequence x
M = length(h); % Length of filter sequence h
M1 = M - 1; % Length of overlap
L = N - M1; % Length of non-overlapping part
% Zero-padding for input and filter sequences
x = [zeros(1, M1), x, zeros(1, N-1)];
h = [h, zeros(1, N - M)];
% Number of blocks
K = floor((Nx + M1 - 1) / L);
% Initialize the output matrix Y
Y = zeros(K + 1, N);
for k = 0:K
xk = x(k*L + 1 : k*L + N); 
Y(k+1, :) = cconv(xk, h, N);
end
Y = Y(:, M:N)';
y = (Y(:))';
